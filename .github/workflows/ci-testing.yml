name: Playwright Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # Check out the code from the repository
      - uses: actions/checkout@v4

      #  Set up Node.js environment with the latest LTS version
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      # Caches `node_modules` folder for faster installation on subsequent runs,
      # using the package-lock.json hash as the cache key
      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install required Node.js dependencies
      - name: Install Dependencies
        run: npm ci

      # Install all browsers for tests to run against
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      # Use Microsoft's official Playwright GitHub Action to set up dependencies
      - name: Set up Playwright
        uses: microsoft/playwright-github-action@v1
        with:
          version: 1.48.1

      # Run Playwright tests
      - name: Run Playwright Tests
        run: npx playwright test --reporter=dot

      # Upload the Playwright report if tests fail to save storage space
      - name: Upload Report on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      # Clean up the `node_modules` and Playwright report directories after tests
      - name: Cleanup after tests (Windows)
        if: runner.os == 'Windows'
        run: |
          rm -r -force node_modules playwright-report
